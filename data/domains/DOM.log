{
  collectClassNamesFromSubtree: (params, sessionId, callback) => {
        return chrome.send(commandName, params, sessionId, callback);
    },
  copyTo: (params, sessionId, callback) => {
        return chrome.send(commandName, params, sessionId, callback);
    },
  describeNode: (params, sessionId, callback) => {
        return chrome.send(commandName, params, sessionId, callback);
    },
  scrollIntoViewIfNeeded: (params, sessionId, callback) => {
        return chrome.send(commandName, params, sessionId, callback);
    },
  disable: (params, sessionId, callback) => {
        return chrome.send(commandName, params, sessionId, callback);
    },
  discardSearchResults: (params, sessionId, callback) => {
        return chrome.send(commandName, params, sessionId, callback);
    },
  enable: (params, sessionId, callback) => {
        return chrome.send(commandName, params, sessionId, callback);
    },
  focus: (params, sessionId, callback) => {
        return chrome.send(commandName, params, sessionId, callback);
    },
  getAttributes: (params, sessionId, callback) => {
        return chrome.send(commandName, params, sessionId, callback);
    },
  getBoxModel: (params, sessionId, callback) => {
        return chrome.send(commandName, params, sessionId, callback);
    },
  getContentQuads: (params, sessionId, callback) => {
        return chrome.send(commandName, params, sessionId, callback);
    },
  getDocument: (params, sessionId, callback) => {
        return chrome.send(commandName, params, sessionId, callback);
    },
  getFlattenedDocument: (params, sessionId, callback) => {
        return chrome.send(commandName, params, sessionId, callback);
    },
  getNodesForSubtreeByStyle: (params, sessionId, callback) => {
        return chrome.send(commandName, params, sessionId, callback);
    },
  getNodeForLocation: (params, sessionId, callback) => {
        return chrome.send(commandName, params, sessionId, callback);
    },
  getOuterHTML: (params, sessionId, callback) => {
        return chrome.send(commandName, params, sessionId, callback);
    },
  getRelayoutBoundary: (params, sessionId, callback) => {
        return chrome.send(commandName, params, sessionId, callback);
    },
  getSearchResults: (params, sessionId, callback) => {
        return chrome.send(commandName, params, sessionId, callback);
    },
  hideHighlight: (params, sessionId, callback) => {
        return chrome.send(commandName, params, sessionId, callback);
    },
  highlightNode: (params, sessionId, callback) => {
        return chrome.send(commandName, params, sessionId, callback);
    },
  highlightRect: (params, sessionId, callback) => {
        return chrome.send(commandName, params, sessionId, callback);
    },
  markUndoableState: (params, sessionId, callback) => {
        return chrome.send(commandName, params, sessionId, callback);
    },
  moveTo: (params, sessionId, callback) => {
        return chrome.send(commandName, params, sessionId, callback);
    },
  performSearch: (params, sessionId, callback) => {
        return chrome.send(commandName, params, sessionId, callback);
    },
  pushNodeByPathToFrontend: (params, sessionId, callback) => {
        return chrome.send(commandName, params, sessionId, callback);
    },
  pushNodesByBackendIdsToFrontend: (params, sessionId, callback) => {
        return chrome.send(commandName, params, sessionId, callback);
    },
  querySelector: (params, sessionId, callback) => {
        return chrome.send(commandName, params, sessionId, callback);
    },
  querySelectorAll: (params, sessionId, callback) => {
        return chrome.send(commandName, params, sessionId, callback);
    },
  getTopLayerElements: (params, sessionId, callback) => {
        return chrome.send(commandName, params, sessionId, callback);
    },
  redo: (params, sessionId, callback) => {
        return chrome.send(commandName, params, sessionId, callback);
    },
  removeAttribute: (params, sessionId, callback) => {
        return chrome.send(commandName, params, sessionId, callback);
    },
  removeNode: (params, sessionId, callback) => {
        return chrome.send(commandName, params, sessionId, callback);
    },
  requestChildNodes: (params, sessionId, callback) => {
        return chrome.send(commandName, params, sessionId, callback);
    },
  requestNode: (params, sessionId, callback) => {
        return chrome.send(commandName, params, sessionId, callback);
    },
  resolveNode: (params, sessionId, callback) => {
        return chrome.send(commandName, params, sessionId, callback);
    },
  setAttributeValue: (params, sessionId, callback) => {
        return chrome.send(commandName, params, sessionId, callback);
    },
  setAttributesAsText: (params, sessionId, callback) => {
        return chrome.send(commandName, params, sessionId, callback);
    },
  setFileInputFiles: (params, sessionId, callback) => {
        return chrome.send(commandName, params, sessionId, callback);
    },
  setNodeStackTracesEnabled: (params, sessionId, callback) => {
        return chrome.send(commandName, params, sessionId, callback);
    },
  getNodeStackTraces: (params, sessionId, callback) => {
        return chrome.send(commandName, params, sessionId, callback);
    },
  getFileInfo: (params, sessionId, callback) => {
        return chrome.send(commandName, params, sessionId, callback);
    },
  setInspectedNode: (params, sessionId, callback) => {
        return chrome.send(commandName, params, sessionId, callback);
    },
  setNodeName: (params, sessionId, callback) => {
        return chrome.send(commandName, params, sessionId, callback);
    },
  setNodeValue: (params, sessionId, callback) => {
        return chrome.send(commandName, params, sessionId, callback);
    },
  setOuterHTML: (params, sessionId, callback) => {
        return chrome.send(commandName, params, sessionId, callback);
    },
  undo: (params, sessionId, callback) => {
        return chrome.send(commandName, params, sessionId, callback);
    },
  getFrameOwner: (params, sessionId, callback) => {
        return chrome.send(commandName, params, sessionId, callback);
    },
  getContainerForNode: (params, sessionId, callback) => {
        return chrome.send(commandName, params, sessionId, callback);
    },
  getQueryingDescendantsForContainer: (params, sessionId, callback) => {
        return chrome.send(commandName, params, sessionId, callback);
    },
  attributeModified: (sessionId, handler) => {
        if (typeof sessionId === 'function') {
            handler = sessionId;
            sessionId = undefined;
        }
        const rawEventName = sessionId ? `${eventName}.${sessionId}` : eventName;
        if (typeof handler === 'function') {
            chrome.on(rawEventName, handler);
            return () => chrome.removeListener(rawEventName, handler);
        } else {
            return new Promise((fulfill, reject) => {
                chrome.once(rawEventName, fulfill);
            });
        }
    },
  attributeRemoved: (sessionId, handler) => {
        if (typeof sessionId === 'function') {
            handler = sessionId;
            sessionId = undefined;
        }
        const rawEventName = sessionId ? `${eventName}.${sessionId}` : eventName;
        if (typeof handler === 'function') {
            chrome.on(rawEventName, handler);
            return () => chrome.removeListener(rawEventName, handler);
        } else {
            return new Promise((fulfill, reject) => {
                chrome.once(rawEventName, fulfill);
            });
        }
    },
  characterDataModified: (sessionId, handler) => {
        if (typeof sessionId === 'function') {
            handler = sessionId;
            sessionId = undefined;
        }
        const rawEventName = sessionId ? `${eventName}.${sessionId}` : eventName;
        if (typeof handler === 'function') {
            chrome.on(rawEventName, handler);
            return () => chrome.removeListener(rawEventName, handler);
        } else {
            return new Promise((fulfill, reject) => {
                chrome.once(rawEventName, fulfill);
            });
        }
    },
  childNodeCountUpdated: (sessionId, handler) => {
        if (typeof sessionId === 'function') {
            handler = sessionId;
            sessionId = undefined;
        }
        const rawEventName = sessionId ? `${eventName}.${sessionId}` : eventName;
        if (typeof handler === 'function') {
            chrome.on(rawEventName, handler);
            return () => chrome.removeListener(rawEventName, handler);
        } else {
            return new Promise((fulfill, reject) => {
                chrome.once(rawEventName, fulfill);
            });
        }
    },
  childNodeInserted: (sessionId, handler) => {
        if (typeof sessionId === 'function') {
            handler = sessionId;
            sessionId = undefined;
        }
        const rawEventName = sessionId ? `${eventName}.${sessionId}` : eventName;
        if (typeof handler === 'function') {
            chrome.on(rawEventName, handler);
            return () => chrome.removeListener(rawEventName, handler);
        } else {
            return new Promise((fulfill, reject) => {
                chrome.once(rawEventName, fulfill);
            });
        }
    },
  childNodeRemoved: (sessionId, handler) => {
        if (typeof sessionId === 'function') {
            handler = sessionId;
            sessionId = undefined;
        }
        const rawEventName = sessionId ? `${eventName}.${sessionId}` : eventName;
        if (typeof handler === 'function') {
            chrome.on(rawEventName, handler);
            return () => chrome.removeListener(rawEventName, handler);
        } else {
            return new Promise((fulfill, reject) => {
                chrome.once(rawEventName, fulfill);
            });
        }
    },
  distributedNodesUpdated: (sessionId, handler) => {
        if (typeof sessionId === 'function') {
            handler = sessionId;
            sessionId = undefined;
        }
        const rawEventName = sessionId ? `${eventName}.${sessionId}` : eventName;
        if (typeof handler === 'function') {
            chrome.on(rawEventName, handler);
            return () => chrome.removeListener(rawEventName, handler);
        } else {
            return new Promise((fulfill, reject) => {
                chrome.once(rawEventName, fulfill);
            });
        }
    },
  documentUpdated: (sessionId, handler) => {
        if (typeof sessionId === 'function') {
            handler = sessionId;
            sessionId = undefined;
        }
        const rawEventName = sessionId ? `${eventName}.${sessionId}` : eventName;
        if (typeof handler === 'function') {
            chrome.on(rawEventName, handler);
            return () => chrome.removeListener(rawEventName, handler);
        } else {
            return new Promise((fulfill, reject) => {
                chrome.once(rawEventName, fulfill);
            });
        }
    },
  inlineStyleInvalidated: (sessionId, handler) => {
        if (typeof sessionId === 'function') {
            handler = sessionId;
            sessionId = undefined;
        }
        const rawEventName = sessionId ? `${eventName}.${sessionId}` : eventName;
        if (typeof handler === 'function') {
            chrome.on(rawEventName, handler);
            return () => chrome.removeListener(rawEventName, handler);
        } else {
            return new Promise((fulfill, reject) => {
                chrome.once(rawEventName, fulfill);
            });
        }
    },
  pseudoElementAdded: (sessionId, handler) => {
        if (typeof sessionId === 'function') {
            handler = sessionId;
            sessionId = undefined;
        }
        const rawEventName = sessionId ? `${eventName}.${sessionId}` : eventName;
        if (typeof handler === 'function') {
            chrome.on(rawEventName, handler);
            return () => chrome.removeListener(rawEventName, handler);
        } else {
            return new Promise((fulfill, reject) => {
                chrome.once(rawEventName, fulfill);
            });
        }
    },
  topLayerElementsUpdated: (sessionId, handler) => {
        if (typeof sessionId === 'function') {
            handler = sessionId;
            sessionId = undefined;
        }
        const rawEventName = sessionId ? `${eventName}.${sessionId}` : eventName;
        if (typeof handler === 'function') {
            chrome.on(rawEventName, handler);
            return () => chrome.removeListener(rawEventName, handler);
        } else {
            return new Promise((fulfill, reject) => {
                chrome.once(rawEventName, fulfill);
            });
        }
    },
  pseudoElementRemoved: (sessionId, handler) => {
        if (typeof sessionId === 'function') {
            handler = sessionId;
            sessionId = undefined;
        }
        const rawEventName = sessionId ? `${eventName}.${sessionId}` : eventName;
        if (typeof handler === 'function') {
            chrome.on(rawEventName, handler);
            return () => chrome.removeListener(rawEventName, handler);
        } else {
            return new Promise((fulfill, reject) => {
                chrome.once(rawEventName, fulfill);
            });
        }
    },
  setChildNodes: (sessionId, handler) => {
        if (typeof sessionId === 'function') {
            handler = sessionId;
            sessionId = undefined;
        }
        const rawEventName = sessionId ? `${eventName}.${sessionId}` : eventName;
        if (typeof handler === 'function') {
            chrome.on(rawEventName, handler);
            return () => chrome.removeListener(rawEventName, handler);
        } else {
            return new Promise((fulfill, reject) => {
                chrome.once(rawEventName, fulfill);
            });
        }
    },
  shadowRootPopped: (sessionId, handler) => {
        if (typeof sessionId === 'function') {
            handler = sessionId;
            sessionId = undefined;
        }
        const rawEventName = sessionId ? `${eventName}.${sessionId}` : eventName;
        if (typeof handler === 'function') {
            chrome.on(rawEventName, handler);
            return () => chrome.removeListener(rawEventName, handler);
        } else {
            return new Promise((fulfill, reject) => {
                chrome.once(rawEventName, fulfill);
            });
        }
    },
  shadowRootPushed: (sessionId, handler) => {
        if (typeof sessionId === 'function') {
            handler = sessionId;
            sessionId = undefined;
        }
        const rawEventName = sessionId ? `${eventName}.${sessionId}` : eventName;
        if (typeof handler === 'function') {
            chrome.on(rawEventName, handler);
            return () => chrome.removeListener(rawEventName, handler);
        } else {
            return new Promise((fulfill, reject) => {
                chrome.once(rawEventName, fulfill);
            });
        }
    },
  NodeId:   {
    category: type,
    id: NodeId,
    description: Unique DOM node identifier.,
    type: integer,
  }
  BackendNodeId:   {
    category: type,
    id: BackendNodeId,
    description: Unique DOM node identifier used to reference a node that may not have been pushed to the
front-end.,
    type: integer,
  }
  BackendNode:   {
    category: type,
    id: BackendNode,
    description: Backend node with a friendly name.,
    type: object,
    properties:     {
      nodeType:       {
        description: `Node`'s nodeType.,
        type: integer,
      }
      nodeName:       {
        description: `Node`'s nodeName.,
        type: string,
      }
      backendNodeId:       {
        $ref: BackendNodeId,
      }
    }
  }
  PseudoType:   {
    category: type,
    id: PseudoType,
    description: Pseudo element type.,
    type: string,
    enum:     {
      0: first-line,
      1: first-letter,
      2: before,
      3: after,
      4: marker,
      5: backdrop,
      6: selection,
      7: target-text,
      8: spelling-error,
      9: grammar-error,
      10: highlight,
      11: first-line-inherited,
      12: scrollbar,
      13: scrollbar-thumb,
      14: scrollbar-button,
      15: scrollbar-track,
      16: scrollbar-track-piece,
      17: scrollbar-corner,
      18: resizer,
      19: input-list-button,
      20: view-transition,
      21: view-transition-group,
      22: view-transition-image-pair,
      23: view-transition-old,
      24: view-transition-new,
    }
  }
  ShadowRootType:   {
    category: type,
    id: ShadowRootType,
    description: Shadow root type.,
    type: string,
    enum:     {
      0: user-agent,
      1: open,
      2: closed,
    }
  }
  CompatibilityMode:   {
    category: type,
    id: CompatibilityMode,
    description: Document compatibility mode.,
    type: string,
    enum:     {
      0: QuirksMode,
      1: LimitedQuirksMode,
      2: NoQuirksMode,
    }
  }
  PhysicalAxes:   {
    category: type,
    id: PhysicalAxes,
    description: ContainerSelector physical axes,
    type: string,
    enum:     {
      0: Horizontal,
      1: Vertical,
      2: Both,
    }
  }
  LogicalAxes:   {
    category: type,
    id: LogicalAxes,
    description: ContainerSelector logical axes,
    type: string,
    enum:     {
      0: Inline,
      1: Block,
      2: Both,
    }
  }
  Node:   {
    category: type,
    id: Node,
    description: DOM interaction is implemented in terms of mirror objects that represent the actual DOM nodes.
DOMNode is a base node mirror type.,
    type: object,
    properties:     {
      nodeId:       {
        description: Node identifier that is passed into the rest of the DOM messages as the `nodeId`. Backend
will only push node with given `id` once. It is aware of all requested nodes and will only
fire DOM events for nodes known to the client.,
        $ref: NodeId,
      }
      parentId:       {
        description: The id of the parent node if any.,
        optional: true,
        $ref: NodeId,
      }
      backendNodeId:       {
        description: The BackendNodeId for this node.,
        $ref: BackendNodeId,
      }
      nodeType:       {
        description: `Node`'s nodeType.,
        type: integer,
      }
      nodeName:       {
        description: `Node`'s nodeName.,
        type: string,
      }
      localName:       {
        description: `Node`'s localName.,
        type: string,
      }
      nodeValue:       {
        description: `Node`'s nodeValue.,
        type: string,
      }
      childNodeCount:       {
        description: Child count for `Container` nodes.,
        optional: true,
        type: integer,
      }
      children:       {
        description: Child nodes of this node when requested with children.,
        optional: true,
        type: array,
        items:         {
          $ref: Node,
        }
      }
      attributes:       {
        description: Attributes of the `Element` node in the form of flat array `[name1, value1, name2, value2]`.,
        optional: true,
        type: array,
        items:         {
          type: string,
        }
      }
      documentURL:       {
        description: Document URL that `Document` or `FrameOwner` node points to.,
        optional: true,
        type: string,
      }
      baseURL:       {
        description: Base URL that `Document` or `FrameOwner` node uses for URL completion.,
        optional: true,
        type: string,
      }
      publicId:       {
        description: `DocumentType`'s publicId.,
        optional: true,
        type: string,
      }
      systemId:       {
        description: `DocumentType`'s systemId.,
        optional: true,
        type: string,
      }
      internalSubset:       {
        description: `DocumentType`'s internalSubset.,
        optional: true,
        type: string,
      }
      xmlVersion:       {
        description: `Document`'s XML version in case of XML documents.,
        optional: true,
        type: string,
      }
      name:       {
        description: `Attr`'s name.,
        optional: true,
        type: string,
      }
      value:       {
        description: `Attr`'s value.,
        optional: true,
        type: string,
      }
      pseudoType:       {
        description: Pseudo element type for this node.,
        optional: true,
        $ref: PseudoType,
      }
      pseudoIdentifier:       {
        description: Pseudo element identifier for this node. Only present if there is a
valid pseudoType.,
        optional: true,
        type: string,
      }
      shadowRootType:       {
        description: Shadow root type.,
        optional: true,
        $ref: ShadowRootType,
      }
      frameId:       {
        description: Frame ID for frame owner elements.,
        optional: true,
        $ref: Page.FrameId,
      }
      contentDocument:       {
        description: Content document for frame owner elements.,
        optional: true,
        $ref: Node,
      }
      shadowRoots:       {
        description: Shadow root list for given element host.,
        optional: true,
        type: array,
        items:         {
          $ref: Node,
        }
      }
      templateContent:       {
        description: Content document fragment for template elements.,
        optional: true,
        $ref: Node,
      }
      pseudoElements:       {
        description: Pseudo elements associated with this node.,
        optional: true,
        type: array,
        items:         {
          $ref: Node,
        }
      }
      importedDocument:       {
        description: Deprecated, as the HTML Imports API has been removed (crbug.com/937746).
This property used to return the imported document for the HTMLImport links.
The property is always undefined now.,
        deprecated: true,
        optional: true,
        $ref: Node,
      }
      distributedNodes:       {
        description: Distributed nodes for given insertion point.,
        optional: true,
        type: array,
        items:         {
          $ref: BackendNode,
        }
      }
      isSVG:       {
        description: Whether the node is SVG.,
        optional: true,
        type: boolean,
      }
      compatibilityMode:       {
        optional: true,
        $ref: CompatibilityMode,
      }
      assignedSlot:       {
        optional: true,
        $ref: BackendNode,
      }
    }
  }
  RGBA:   {
    category: type,
    id: RGBA,
    description: A structure holding an RGBA color.,
    type: object,
    properties:     {
      r:       {
        description: The red component, in the [0-255] range.,
        type: integer,
      }
      g:       {
        description: The green component, in the [0-255] range.,
        type: integer,
      }
      b:       {
        description: The blue component, in the [0-255] range.,
        type: integer,
      }
      a:       {
        description: The alpha component, in the [0-1] range (default: 1).,
        optional: true,
        type: number,
      }
    }
  }
  Quad:   {
    category: type,
    id: Quad,
    description: An array of quad vertices, x immediately followed by y for each point, points clock-wise.,
    type: array,
    items:     {
      type: number,
    }
  }
  BoxModel:   {
    category: type,
    id: BoxModel,
    description: Box model.,
    type: object,
    properties:     {
      content:       {
        description: Content box,
        $ref: Quad,
      }
      padding:       {
        description: Padding box,
        $ref: Quad,
      }
      border:       {
        description: Border box,
        $ref: Quad,
      }
      margin:       {
        description: Margin box,
        $ref: Quad,
      }
      width:       {
        description: Node width,
        type: integer,
      }
      height:       {
        description: Node height,
        type: integer,
      }
      shapeOutside:       {
        description: Shape outside coordinates,
        optional: true,
        $ref: ShapeOutsideInfo,
      }
    }
  }
  ShapeOutsideInfo:   {
    category: type,
    id: ShapeOutsideInfo,
    description: CSS Shape Outside details.,
    type: object,
    properties:     {
      bounds:       {
        description: Shape bounds,
        $ref: Quad,
      }
      shape:       {
        description: Shape coordinate details,
        type: array,
        items:         {
          type: any,
        }
      }
      marginShape:       {
        description: Margin shape bounds,
        type: array,
        items:         {
          type: any,
        }
      }
    }
  }
  Rect:   {
    category: type,
    id: Rect,
    description: Rectangle.,
    type: object,
    properties:     {
      x:       {
        description: X coordinate,
        type: number,
      }
      y:       {
        description: Y coordinate,
        type: number,
      }
      width:       {
        description: Rectangle width,
        type: number,
      }
      height:       {
        description: Rectangle height,
        type: number,
      }
    }
  }
  CSSComputedStyleProperty:   {
    category: type,
    id: CSSComputedStyleProperty,
    type: object,
    properties:     {
      name:       {
        description: Computed style property name.,
        type: string,
      }
      value:       {
        description: Computed style property value.,
        type: string,
      }
    }
  }
  on: (eventName, handler) => {
            return object[domainName][eventName](handler);
        },
}
