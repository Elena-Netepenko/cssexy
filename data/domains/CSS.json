[
  [
    "addRule",
    null
  ],
  [
    "collectClassNames",
    null
  ],
  [
    "createStyleSheet",
    null
  ],
  [
    "disable",
    null
  ],
  [
    "enable",
    null
  ],
  [
    "forcePseudoState",
    null
  ],
  [
    "getBackgroundColors",
    null
  ],
  [
    "getComputedStyleForNode",
    null
  ],
  [
    "getInlineStylesForNode",
    null
  ],
  [
    "getMatchedStylesForNode",
    null
  ],
  [
    "getMediaQueries",
    null
  ],
  [
    "getPlatformFontsForNode",
    null
  ],
  [
    "getStyleSheetText",
    null
  ],
  [
    "getLayersForNode",
    null
  ],
  [
    "trackComputedStyleUpdates",
    null
  ],
  [
    "takeComputedStyleUpdates",
    null
  ],
  [
    "setEffectivePropertyValueForNode",
    null
  ],
  [
    "setPropertyRulePropertyName",
    null
  ],
  [
    "setKeyframeKey",
    null
  ],
  [
    "setMediaText",
    null
  ],
  [
    "setContainerQueryText",
    null
  ],
  [
    "setSupportsText",
    null
  ],
  [
    "setScopeText",
    null
  ],
  [
    "setRuleSelector",
    null
  ],
  [
    "setStyleSheetText",
    null
  ],
  [
    "setStyleTexts",
    null
  ],
  [
    "startRuleUsageTracking",
    null
  ],
  [
    "stopRuleUsageTracking",
    null
  ],
  [
    "takeCoverageDelta",
    null
  ],
  [
    "setLocalFontsEnabled",
    null
  ],
  [
    "fontsUpdated",
    null
  ],
  [
    "mediaQueryResultChanged",
    null
  ],
  [
    "styleSheetAdded",
    null
  ],
  [
    "styleSheetChanged",
    null
  ],
  [
    "styleSheetRemoved",
    null
  ],
  [
    "StyleSheetId",
    {
      "category": "type",
      "id": "StyleSheetId",
      "type": "string"
    }
  ],
  [
    "StyleSheetOrigin",
    {
      "category": "type",
      "id": "StyleSheetOrigin",
      "description": "Stylesheet type: \"injected\" for stylesheets injected via extension, \"user-agent\" for user-agent\nstylesheets, \"inspector\" for stylesheets created by the inspector (i.e. those holding the \"via\ninspector\" rules), \"regular\" for regular stylesheets.",
      "type": "string",
      "enum": [
        "injected",
        "user-agent",
        "inspector",
        "regular"
      ]
    }
  ],
  [
    "PseudoElementMatches",
    {
      "category": "type",
      "id": "PseudoElementMatches",
      "description": "CSS rule collection for a single pseudo style.",
      "type": "object",
      "properties": {
        "pseudoType": {
          "description": "Pseudo element type.",
          "$ref": "DOM.PseudoType"
        },
        "pseudoIdentifier": {
          "description": "Pseudo element custom ident.",
          "optional": true,
          "type": "string"
        },
        "matches": {
          "description": "Matches of CSS rules applicable to the pseudo style.",
          "type": "array",
          "items": {
            "$ref": "RuleMatch"
          }
        }
      }
    }
  ],
  [
    "InheritedStyleEntry",
    {
      "category": "type",
      "id": "InheritedStyleEntry",
      "description": "Inherited CSS rule collection from ancestor node.",
      "type": "object",
      "properties": {
        "inlineStyle": {
          "description": "The ancestor node's inline style, if any, in the style inheritance chain.",
          "optional": true,
          "$ref": "CSSStyle"
        },
        "matchedCSSRules": {
          "description": "Matches of CSS rules matching the ancestor node in the style inheritance chain.",
          "type": "array",
          "items": {
            "$ref": "RuleMatch"
          }
        }
      }
    }
  ],
  [
    "InheritedPseudoElementMatches",
    {
      "category": "type",
      "id": "InheritedPseudoElementMatches",
      "description": "Inherited pseudo element matches from pseudos of an ancestor node.",
      "type": "object",
      "properties": {
        "pseudoElements": {
          "description": "Matches of pseudo styles from the pseudos of an ancestor node.",
          "type": "array",
          "items": {
            "$ref": "PseudoElementMatches"
          }
        }
      }
    }
  ],
  [
    "RuleMatch",
    {
      "category": "type",
      "id": "RuleMatch",
      "description": "Match data for a CSS rule.",
      "type": "object",
      "properties": {
        "rule": {
          "description": "CSS rule in the match.",
          "$ref": "CSSRule"
        },
        "matchingSelectors": {
          "description": "Matching selector indices in the rule's selectorList selectors (0-based).",
          "type": "array",
          "items": {
            "type": "integer"
          }
        }
      }
    }
  ],
  [
    "Value",
    {
      "category": "type",
      "id": "Value",
      "description": "Data for a simple selector (these are delimited by commas in a selector list).",
      "type": "object",
      "properties": {
        "text": {
          "description": "Value text.",
          "type": "string"
        },
        "range": {
          "description": "Value range in the underlying resource (if available).",
          "optional": true,
          "$ref": "SourceRange"
        },
        "specificity": {
          "description": "Specificity of the selector.",
          "experimental": true,
          "optional": true,
          "$ref": "Specificity"
        }
      }
    }
  ],
  [
    "Specificity",
    {
      "category": "type",
      "id": "Specificity",
      "description": "Specificity:\nhttps://drafts.csswg.org/selectors/#specificity-rules",
      "experimental": true,
      "type": "object",
      "properties": {
        "a": {
          "description": "The a component, which represents the number of ID selectors.",
          "type": "integer"
        },
        "b": {
          "description": "The b component, which represents the number of class selectors, attributes selectors, and\npseudo-classes.",
          "type": "integer"
        },
        "c": {
          "description": "The c component, which represents the number of type selectors and pseudo-elements.",
          "type": "integer"
        }
      }
    }
  ],
  [
    "SelectorList",
    {
      "category": "type",
      "id": "SelectorList",
      "description": "Selector list data.",
      "type": "object",
      "properties": {
        "selectors": {
          "description": "Selectors in the list.",
          "type": "array",
          "items": {
            "$ref": "Value"
          }
        },
        "text": {
          "description": "Rule selector text.",
          "type": "string"
        }
      }
    }
  ],
  [
    "CSSStyleSheetHeader",
    {
      "category": "type",
      "id": "CSSStyleSheetHeader",
      "description": "CSS stylesheet metainformation.",
      "type": "object",
      "properties": {
        "styleSheetId": {
          "description": "The stylesheet identifier.",
          "$ref": "StyleSheetId"
        },
        "frameId": {
          "description": "Owner frame identifier.",
          "$ref": "Page.FrameId"
        },
        "sourceURL": {
          "description": "Stylesheet resource URL. Empty if this is a constructed stylesheet created using\nnew CSSStyleSheet() (but non-empty if this is a constructed sylesheet imported\nas a CSS module script).",
          "type": "string"
        },
        "sourceMapURL": {
          "description": "URL of source map associated with the stylesheet (if any).",
          "optional": true,
          "type": "string"
        },
        "origin": {
          "description": "Stylesheet origin.",
          "$ref": "StyleSheetOrigin"
        },
        "title": {
          "description": "Stylesheet title.",
          "type": "string"
        },
        "ownerNode": {
          "description": "The backend id for the owner node of the stylesheet.",
          "optional": true,
          "$ref": "DOM.BackendNodeId"
        },
        "disabled": {
          "description": "Denotes whether the stylesheet is disabled.",
          "type": "boolean"
        },
        "hasSourceURL": {
          "description": "Whether the sourceURL field value comes from the sourceURL comment.",
          "optional": true,
          "type": "boolean"
        },
        "isInline": {
          "description": "Whether this stylesheet is created for STYLE tag by parser. This flag is not set for\ndocument.written STYLE tags.",
          "type": "boolean"
        },
        "isMutable": {
          "description": "Whether this stylesheet is mutable. Inline stylesheets become mutable\nafter they have been modified via CSSOM API.\n`<link>` element's stylesheets become mutable only if DevTools modifies them.\nConstructed stylesheets (new CSSStyleSheet()) are mutable immediately after creation.",
          "type": "boolean"
        },
        "isConstructed": {
          "description": "True if this stylesheet is created through new CSSStyleSheet() or imported as a\nCSS module script.",
          "type": "boolean"
        },
        "startLine": {
          "description": "Line offset of the stylesheet within the resource (zero based).",
          "type": "number"
        },
        "startColumn": {
          "description": "Column offset of the stylesheet within the resource (zero based).",
          "type": "number"
        },
        "length": {
          "description": "Size of the content (in characters).",
          "type": "number"
        },
        "endLine": {
          "description": "Line offset of the end of the stylesheet within the resource (zero based).",
          "type": "number"
        },
        "endColumn": {
          "description": "Column offset of the end of the stylesheet within the resource (zero based).",
          "type": "number"
        },
        "loadingFailed": {
          "description": "If the style sheet was loaded from a network resource, this indicates when the resource failed to load",
          "experimental": true,
          "optional": true,
          "type": "boolean"
        }
      }
    }
  ],
  [
    "CSSRule",
    {
      "category": "type",
      "id": "CSSRule",
      "description": "CSS rule representation.",
      "type": "object",
      "properties": {
        "styleSheetId": {
          "description": "The css style sheet identifier (absent for user agent stylesheet and user-specified\nstylesheet rules) this rule came from.",
          "optional": true,
          "$ref": "StyleSheetId"
        },
        "selectorList": {
          "description": "Rule selector data.",
          "$ref": "SelectorList"
        },
        "nestingSelectors": {
          "description": "Array of selectors from ancestor style rules, sorted by distance from the current rule.",
          "experimental": true,
          "optional": true,
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "origin": {
          "description": "Parent stylesheet's origin.",
          "$ref": "StyleSheetOrigin"
        },
        "style": {
          "description": "Associated style declaration.",
          "$ref": "CSSStyle"
        },
        "media": {
          "description": "Media list array (for rules involving media queries). The array enumerates media queries\nstarting with the innermost one, going outwards.",
          "optional": true,
          "type": "array",
          "items": {
            "$ref": "CSSMedia"
          }
        },
        "containerQueries": {
          "description": "Container query list array (for rules involving container queries).\nThe array enumerates container queries starting with the innermost one, going outwards.",
          "experimental": true,
          "optional": true,
          "type": "array",
          "items": {
            "$ref": "CSSContainerQuery"
          }
        },
        "supports": {
          "description": "@supports CSS at-rule array.\nThe array enumerates @supports at-rules starting with the innermost one, going outwards.",
          "experimental": true,
          "optional": true,
          "type": "array",
          "items": {
            "$ref": "CSSSupports"
          }
        },
        "layers": {
          "description": "Cascade layer array. Contains the layer hierarchy that this rule belongs to starting\nwith the innermost layer and going outwards.",
          "experimental": true,
          "optional": true,
          "type": "array",
          "items": {
            "$ref": "CSSLayer"
          }
        },
        "scopes": {
          "description": "@scope CSS at-rule array.\nThe array enumerates @scope at-rules starting with the innermost one, going outwards.",
          "experimental": true,
          "optional": true,
          "type": "array",
          "items": {
            "$ref": "CSSScope"
          }
        },
        "ruleTypes": {
          "description": "The array keeps the types of ancestor CSSRules from the innermost going outwards.",
          "experimental": true,
          "optional": true,
          "type": "array",
          "items": {
            "$ref": "CSSRuleType"
          }
        }
      }
    }
  ],
  [
    "CSSRuleType",
    {
      "category": "type",
      "id": "CSSRuleType",
      "description": "Enum indicating the type of a CSS rule, used to represent the order of a style rule's ancestors.\nThis list only contains rule types that are collected during the ancestor rule collection.",
      "experimental": true,
      "type": "string",
      "enum": [
        "MediaRule",
        "SupportsRule",
        "ContainerRule",
        "LayerRule",
        "ScopeRule",
        "StyleRule"
      ]
    }
  ],
  [
    "RuleUsage",
    {
      "category": "type",
      "id": "RuleUsage",
      "description": "CSS coverage information.",
      "type": "object",
      "properties": {
        "styleSheetId": {
          "description": "The css style sheet identifier (absent for user agent stylesheet and user-specified\nstylesheet rules) this rule came from.",
          "$ref": "StyleSheetId"
        },
        "startOffset": {
          "description": "Offset of the start of the rule (including selector) from the beginning of the stylesheet.",
          "type": "number"
        },
        "endOffset": {
          "description": "Offset of the end of the rule body from the beginning of the stylesheet.",
          "type": "number"
        },
        "used": {
          "description": "Indicates whether the rule was actually used by some element in the page.",
          "type": "boolean"
        }
      }
    }
  ],
  [
    "SourceRange",
    {
      "category": "type",
      "id": "SourceRange",
      "description": "Text range within a resource. All numbers are zero-based.",
      "type": "object",
      "properties": {
        "startLine": {
          "description": "Start line of range.",
          "type": "integer"
        },
        "startColumn": {
          "description": "Start column of range (inclusive).",
          "type": "integer"
        },
        "endLine": {
          "description": "End line of range",
          "type": "integer"
        },
        "endColumn": {
          "description": "End column of range (exclusive).",
          "type": "integer"
        }
      }
    }
  ],
  [
    "ShorthandEntry",
    {
      "category": "type",
      "id": "ShorthandEntry",
      "type": "object",
      "properties": {
        "name": {
          "description": "Shorthand name.",
          "type": "string"
        },
        "value": {
          "description": "Shorthand value.",
          "type": "string"
        },
        "important": {
          "description": "Whether the property has \"!important\" annotation (implies `false` if absent).",
          "optional": true,
          "type": "boolean"
        }
      }
    }
  ],
  [
    "CSSComputedStyleProperty",
    {
      "category": "type",
      "id": "CSSComputedStyleProperty",
      "type": "object",
      "properties": {
        "name": {
          "description": "Computed style property name.",
          "type": "string"
        },
        "value": {
          "description": "Computed style property value.",
          "type": "string"
        }
      }
    }
  ],
  [
    "CSSStyle",
    {
      "category": "type",
      "id": "CSSStyle",
      "description": "CSS style representation.",
      "type": "object",
      "properties": {
        "styleSheetId": {
          "description": "The css style sheet identifier (absent for user agent stylesheet and user-specified\nstylesheet rules) this rule came from.",
          "optional": true,
          "$ref": "StyleSheetId"
        },
        "cssProperties": {
          "description": "CSS properties in the style.",
          "type": "array",
          "items": {
            "$ref": "CSSProperty"
          }
        },
        "shorthandEntries": {
          "description": "Computed values for all shorthands found in the style.",
          "type": "array",
          "items": {
            "$ref": "ShorthandEntry"
          }
        },
        "cssText": {
          "description": "Style declaration text (if available).",
          "optional": true,
          "type": "string"
        },
        "range": {
          "description": "Style declaration range in the enclosing stylesheet (if available).",
          "optional": true,
          "$ref": "SourceRange"
        }
      }
    }
  ],
  [
    "CSSProperty",
    {
      "category": "type",
      "id": "CSSProperty",
      "description": "CSS property declaration data.",
      "type": "object",
      "properties": {
        "name": {
          "description": "The property name.",
          "type": "string"
        },
        "value": {
          "description": "The property value.",
          "type": "string"
        },
        "important": {
          "description": "Whether the property has \"!important\" annotation (implies `false` if absent).",
          "optional": true,
          "type": "boolean"
        },
        "implicit": {
          "description": "Whether the property is implicit (implies `false` if absent).",
          "optional": true,
          "type": "boolean"
        },
        "text": {
          "description": "The full property text as specified in the style.",
          "optional": true,
          "type": "string"
        },
        "parsedOk": {
          "description": "Whether the property is understood by the browser (implies `true` if absent).",
          "optional": true,
          "type": "boolean"
        },
        "disabled": {
          "description": "Whether the property is disabled by the user (present for source-based properties only).",
          "optional": true,
          "type": "boolean"
        },
        "range": {
          "description": "The entire property range in the enclosing style declaration (if available).",
          "optional": true,
          "$ref": "SourceRange"
        },
        "longhandProperties": {
          "description": "Parsed longhand components of this property if it is a shorthand.\nThis field will be empty if the given property is not a shorthand.",
          "experimental": true,
          "optional": true,
          "type": "array",
          "items": {
            "$ref": "CSSProperty"
          }
        }
      }
    }
  ],
  [
    "CSSMedia",
    {
      "category": "type",
      "id": "CSSMedia",
      "description": "CSS media rule descriptor.",
      "type": "object",
      "properties": {
        "text": {
          "description": "Media query text.",
          "type": "string"
        },
        "source": {
          "description": "Source of the media query: \"mediaRule\" if specified by a @media rule, \"importRule\" if\nspecified by an @import rule, \"linkedSheet\" if specified by a \"media\" attribute in a linked\nstylesheet's LINK tag, \"inlineSheet\" if specified by a \"media\" attribute in an inline\nstylesheet's STYLE tag.",
          "type": "string",
          "enum": [
            "mediaRule",
            "importRule",
            "linkedSheet",
            "inlineSheet"
          ]
        },
        "sourceURL": {
          "description": "URL of the document containing the media query description.",
          "optional": true,
          "type": "string"
        },
        "range": {
          "description": "The associated rule (@media or @import) header range in the enclosing stylesheet (if\navailable).",
          "optional": true,
          "$ref": "SourceRange"
        },
        "styleSheetId": {
          "description": "Identifier of the stylesheet containing this object (if exists).",
          "optional": true,
          "$ref": "StyleSheetId"
        },
        "mediaList": {
          "description": "Array of media queries.",
          "optional": true,
          "type": "array",
          "items": {
            "$ref": "MediaQuery"
          }
        }
      }
    }
  ],
  [
    "MediaQuery",
    {
      "category": "type",
      "id": "MediaQuery",
      "description": "Media query descriptor.",
      "type": "object",
      "properties": {
        "expressions": {
          "description": "Array of media query expressions.",
          "type": "array",
          "items": {
            "$ref": "MediaQueryExpression"
          }
        },
        "active": {
          "description": "Whether the media query condition is satisfied.",
          "type": "boolean"
        }
      }
    }
  ],
  [
    "MediaQueryExpression",
    {
      "category": "type",
      "id": "MediaQueryExpression",
      "description": "Media query expression descriptor.",
      "type": "object",
      "properties": {
        "value": {
          "description": "Media query expression value.",
          "type": "number"
        },
        "unit": {
          "description": "Media query expression units.",
          "type": "string"
        },
        "feature": {
          "description": "Media query expression feature.",
          "type": "string"
        },
        "valueRange": {
          "description": "The associated range of the value text in the enclosing stylesheet (if available).",
          "optional": true,
          "$ref": "SourceRange"
        },
        "computedLength": {
          "description": "Computed length of media query expression (if applicable).",
          "optional": true,
          "type": "number"
        }
      }
    }
  ],
  [
    "CSSContainerQuery",
    {
      "category": "type",
      "id": "CSSContainerQuery",
      "description": "CSS container query rule descriptor.",
      "experimental": true,
      "type": "object",
      "properties": {
        "text": {
          "description": "Container query text.",
          "type": "string"
        },
        "range": {
          "description": "The associated rule header range in the enclosing stylesheet (if\navailable).",
          "optional": true,
          "$ref": "SourceRange"
        },
        "styleSheetId": {
          "description": "Identifier of the stylesheet containing this object (if exists).",
          "optional": true,
          "$ref": "StyleSheetId"
        },
        "name": {
          "description": "Optional name for the container.",
          "optional": true,
          "type": "string"
        },
        "physicalAxes": {
          "description": "Optional physical axes queried for the container.",
          "optional": true,
          "$ref": "DOM.PhysicalAxes"
        },
        "logicalAxes": {
          "description": "Optional logical axes queried for the container.",
          "optional": true,
          "$ref": "DOM.LogicalAxes"
        }
      }
    }
  ],
  [
    "CSSSupports",
    {
      "category": "type",
      "id": "CSSSupports",
      "description": "CSS Supports at-rule descriptor.",
      "experimental": true,
      "type": "object",
      "properties": {
        "text": {
          "description": "Supports rule text.",
          "type": "string"
        },
        "active": {
          "description": "Whether the supports condition is satisfied.",
          "type": "boolean"
        },
        "range": {
          "description": "The associated rule header range in the enclosing stylesheet (if\navailable).",
          "optional": true,
          "$ref": "SourceRange"
        },
        "styleSheetId": {
          "description": "Identifier of the stylesheet containing this object (if exists).",
          "optional": true,
          "$ref": "StyleSheetId"
        }
      }
    }
  ],
  [
    "CSSScope",
    {
      "category": "type",
      "id": "CSSScope",
      "description": "CSS Scope at-rule descriptor.",
      "experimental": true,
      "type": "object",
      "properties": {
        "text": {
          "description": "Scope rule text.",
          "type": "string"
        },
        "range": {
          "description": "The associated rule header range in the enclosing stylesheet (if\navailable).",
          "optional": true,
          "$ref": "SourceRange"
        },
        "styleSheetId": {
          "description": "Identifier of the stylesheet containing this object (if exists).",
          "optional": true,
          "$ref": "StyleSheetId"
        }
      }
    }
  ],
  [
    "CSSLayer",
    {
      "category": "type",
      "id": "CSSLayer",
      "description": "CSS Layer at-rule descriptor.",
      "experimental": true,
      "type": "object",
      "properties": {
        "text": {
          "description": "Layer name.",
          "type": "string"
        },
        "range": {
          "description": "The associated rule header range in the enclosing stylesheet (if\navailable).",
          "optional": true,
          "$ref": "SourceRange"
        },
        "styleSheetId": {
          "description": "Identifier of the stylesheet containing this object (if exists).",
          "optional": true,
          "$ref": "StyleSheetId"
        }
      }
    }
  ],
  [
    "CSSLayerData",
    {
      "category": "type",
      "id": "CSSLayerData",
      "description": "CSS Layer data.",
      "experimental": true,
      "type": "object",
      "properties": {
        "name": {
          "description": "Layer name.",
          "type": "string"
        },
        "subLayers": {
          "description": "Direct sub-layers",
          "optional": true,
          "type": "array",
          "items": {
            "$ref": "CSSLayerData"
          }
        },
        "order": {
          "description": "Layer order. The order determines the order of the layer in the cascade order.\nA higher number has higher priority in the cascade order.",
          "type": "number"
        }
      }
    }
  ],
  [
    "PlatformFontUsage",
    {
      "category": "type",
      "id": "PlatformFontUsage",
      "description": "Information about amount of glyphs that were rendered with given font.",
      "type": "object",
      "properties": {
        "familyName": {
          "description": "Font's family name reported by platform.",
          "type": "string"
        },
        "postScriptName": {
          "description": "Font's PostScript name reported by platform.",
          "type": "string"
        },
        "isCustomFont": {
          "description": "Indicates if the font was downloaded or resolved locally.",
          "type": "boolean"
        },
        "glyphCount": {
          "description": "Amount of glyphs that were rendered with this font.",
          "type": "number"
        }
      }
    }
  ],
  [
    "FontVariationAxis",
    {
      "category": "type",
      "id": "FontVariationAxis",
      "description": "Information about font variation axes for variable fonts",
      "type": "object",
      "properties": {
        "tag": {
          "description": "The font-variation-setting tag (a.k.a. \"axis tag\").",
          "type": "string"
        },
        "name": {
          "description": "Human-readable variation name in the default language (normally, \"en\").",
          "type": "string"
        },
        "minValue": {
          "description": "The minimum value (inclusive) the font supports for this tag.",
          "type": "number"
        },
        "maxValue": {
          "description": "The maximum value (inclusive) the font supports for this tag.",
          "type": "number"
        },
        "defaultValue": {
          "description": "The default value.",
          "type": "number"
        }
      }
    }
  ],
  [
    "FontFace",
    {
      "category": "type",
      "id": "FontFace",
      "description": "Properties of a web font: https://www.w3.org/TR/2008/REC-CSS2-20080411/fonts.html#font-descriptions\nand additional information such as platformFontFamily and fontVariationAxes.",
      "type": "object",
      "properties": {
        "fontFamily": {
          "description": "The font-family.",
          "type": "string"
        },
        "fontStyle": {
          "description": "The font-style.",
          "type": "string"
        },
        "fontVariant": {
          "description": "The font-variant.",
          "type": "string"
        },
        "fontWeight": {
          "description": "The font-weight.",
          "type": "string"
        },
        "fontStretch": {
          "description": "The font-stretch.",
          "type": "string"
        },
        "fontDisplay": {
          "description": "The font-display.",
          "type": "string"
        },
        "unicodeRange": {
          "description": "The unicode-range.",
          "type": "string"
        },
        "src": {
          "description": "The src.",
          "type": "string"
        },
        "platformFontFamily": {
          "description": "The resolved platform font family",
          "type": "string"
        },
        "fontVariationAxes": {
          "description": "Available variation settings (a.k.a. \"axes\").",
          "optional": true,
          "type": "array",
          "items": {
            "$ref": "FontVariationAxis"
          }
        }
      }
    }
  ],
  [
    "CSSTryRule",
    {
      "category": "type",
      "id": "CSSTryRule",
      "description": "CSS try rule representation.",
      "type": "object",
      "properties": {
        "styleSheetId": {
          "description": "The css style sheet identifier (absent for user agent stylesheet and user-specified\nstylesheet rules) this rule came from.",
          "optional": true,
          "$ref": "StyleSheetId"
        },
        "origin": {
          "description": "Parent stylesheet's origin.",
          "$ref": "StyleSheetOrigin"
        },
        "style": {
          "description": "Associated style declaration.",
          "$ref": "CSSStyle"
        }
      }
    }
  ],
  [
    "CSSPositionFallbackRule",
    {
      "category": "type",
      "id": "CSSPositionFallbackRule",
      "description": "CSS position-fallback rule representation.",
      "type": "object",
      "properties": {
        "name": {
          "$ref": "Value"
        },
        "tryRules": {
          "description": "List of keyframes.",
          "type": "array",
          "items": {
            "$ref": "CSSTryRule"
          }
        }
      }
    }
  ],
  [
    "CSSKeyframesRule",
    {
      "category": "type",
      "id": "CSSKeyframesRule",
      "description": "CSS keyframes rule representation.",
      "type": "object",
      "properties": {
        "animationName": {
          "description": "Animation name.",
          "$ref": "Value"
        },
        "keyframes": {
          "description": "List of keyframes.",
          "type": "array",
          "items": {
            "$ref": "CSSKeyframeRule"
          }
        }
      }
    }
  ],
  [
    "CSSPropertyRegistration",
    {
      "category": "type",
      "id": "CSSPropertyRegistration",
      "description": "Representation of a custom property registration through CSS.registerProperty",
      "type": "object",
      "properties": {
        "propertyName": {
          "type": "string"
        },
        "initialValue": {
          "optional": true,
          "$ref": "Value"
        },
        "inherits": {
          "type": "boolean"
        },
        "syntax": {
          "type": "string"
        }
      }
    }
  ],
  [
    "CSSFontPaletteValuesRule",
    {
      "category": "type",
      "id": "CSSFontPaletteValuesRule",
      "description": "CSS font-palette-values rule representation.",
      "type": "object",
      "properties": {
        "styleSheetId": {
          "description": "The css style sheet identifier (absent for user agent stylesheet and user-specified\nstylesheet rules) this rule came from.",
          "optional": true,
          "$ref": "StyleSheetId"
        },
        "origin": {
          "description": "Parent stylesheet's origin.",
          "$ref": "StyleSheetOrigin"
        },
        "fontPaletteName": {
          "description": "Associated font palette name.",
          "$ref": "Value"
        },
        "style": {
          "description": "Associated style declaration.",
          "$ref": "CSSStyle"
        }
      }
    }
  ],
  [
    "CSSPropertyRule",
    {
      "category": "type",
      "id": "CSSPropertyRule",
      "description": "CSS property at-rule representation.",
      "type": "object",
      "properties": {
        "styleSheetId": {
          "description": "The css style sheet identifier (absent for user agent stylesheet and user-specified\nstylesheet rules) this rule came from.",
          "optional": true,
          "$ref": "StyleSheetId"
        },
        "origin": {
          "description": "Parent stylesheet's origin.",
          "$ref": "StyleSheetOrigin"
        },
        "propertyName": {
          "description": "Associated property name.",
          "$ref": "Value"
        },
        "style": {
          "description": "Associated style declaration.",
          "$ref": "CSSStyle"
        }
      }
    }
  ],
  [
    "CSSKeyframeRule",
    {
      "category": "type",
      "id": "CSSKeyframeRule",
      "description": "CSS keyframe rule representation.",
      "type": "object",
      "properties": {
        "styleSheetId": {
          "description": "The css style sheet identifier (absent for user agent stylesheet and user-specified\nstylesheet rules) this rule came from.",
          "optional": true,
          "$ref": "StyleSheetId"
        },
        "origin": {
          "description": "Parent stylesheet's origin.",
          "$ref": "StyleSheetOrigin"
        },
        "keyText": {
          "description": "Associated key text.",
          "$ref": "Value"
        },
        "style": {
          "description": "Associated style declaration.",
          "$ref": "CSSStyle"
        }
      }
    }
  ],
  [
    "StyleDeclarationEdit",
    {
      "category": "type",
      "id": "StyleDeclarationEdit",
      "description": "A descriptor of operation to mutate style declaration text.",
      "type": "object",
      "properties": {
        "styleSheetId": {
          "description": "The css style sheet identifier.",
          "$ref": "StyleSheetId"
        },
        "range": {
          "description": "The range of the style text in the enclosing stylesheet.",
          "$ref": "SourceRange"
        },
        "text": {
          "description": "New style text.",
          "type": "string"
        }
      }
    }
  ],
  [
    "on",
    null
  ]
]